name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required to create releases and upload assets

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Run full test suite
      run: cargo test --workspace --verbose

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Validate examples
      run: |
        cargo run --example basic_usage
        cargo run --example derive_example
        cargo run --example generator_example
        cargo run --example serde_rename_test

    - name: Dry run publish
      run: |
        cargo publish --dry-run -p zod_gen
        # Note: zod_gen_derive dry run skipped because it depends on zod_gen v1.1.5 which isn't published yet

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish zod_gen
      run: cargo publish -p zod_gen
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Wait for zod_gen to be available
      run: |
        echo "Waiting for zod_gen to be available on crates.io..."
        VERSION=${{ github.ref_name }}
        VERSION_WITHOUT_V=${VERSION#v}
        for i in {1..12}; do
          echo "Attempt $i: Checking if zod_gen ${VERSION} is available..."
          if cargo info --registry crates-io zod_gen --version ${VERSION_WITHOUT_V} >/dev/null 2>&1; then
            echo "zod_gen ${VERSION} is now available on crates.io!"
            exit 0
          fi
          echo "Not available yet, waiting 10 seconds..."
          sleep 10
        done
        echo "ERROR: zod_gen ${VERSION} did not become available after 2 minutes"
        exit 1

    - name: Publish zod_gen_derive
      run: cargo publish -p zod_gen_derive
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-tools-

    - name: Cache rust-script projects
      uses: actions/cache@v4
      with:
        path: ~/.cache/rust-script/projects
        key: ${{ runner.os }}-rust-script-${{ hashFiles('.github/scripts/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-rust-script-

    - name: Install rust-script
      run: command -v rust-script >/dev/null 2>&1 || cargo install rust-script

    - name: Extract changelog
      id: changelog
      run: rust-script .github/scripts/extract_changelog.rs ${{ steps.version.outputs.VERSION }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
