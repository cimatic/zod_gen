name: Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
         key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-tools-
    
    - name: Cache rust-script projects
      uses: actions/cache@v4
      with:
        path: ~/.cache/rust-script/projects
        key: ${{ runner.os }}-rust-script-${{ hashFiles('.github/scripts/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-rust-script-
    
    - name: Install rust-script
      run: command -v rust-script >/dev/null 2>&1 || cargo install rust-script
    
    - name: Run PR validation checks
      run: rust-script .github/scripts/pr_validation.rs
      env:
        GITHUB_EVENT_PULL_REQUEST_DRAFT: ${{ github.event.pull_request.draft }}    
    - name: Run full test suite
      run: cargo test --workspace --verbose
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy with strict lints
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings -D clippy::all
    
    - name: Validate examples still work
      run: |
        cargo run --example basic_usage
        cargo run --example derive_example
        cargo run --example generator_example
    
    - name: Check documentation builds
      run: cargo doc --workspace --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: -D warnings
    
    - name: Validate package can be published
      run: |
        cargo publish --dry-run -p zod_gen
        cargo publish --dry-run -p zod_gen_derive

  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo tools
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-tools-
    
    - name: Cache rust-script projects
      uses: actions/cache@v4
      with:
        path: ~/.cache/rust-script/projects
        key: ${{ runner.os }}-rust-script-${{ hashFiles('.github/scripts/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-rust-script-
    
    - name: Install rust-script
      run: command -v rust-script >/dev/null 2>&1 || cargo install rust-script
    
    - name: Build release binaries
      run: cargo build --release --workspace
    
    - name: Check binary sizes
      run: rust-script .github/scripts/check_binary_sizes.rs